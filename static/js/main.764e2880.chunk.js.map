{"version":3,"sources":["images/sih3.png","components/Home.js","components/Dropzone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","max_offset","initial_offset","Component","Home","props","handleScroll","event","scrollTop","window","pageYOffset","state","offset","header","previous_scroll","innerWidth","setState","x","scrollY","innerHeight","homeRef","current","classList","toggle","React","createRef","this","hideLogo","scrollTo","addEventListener","document","body","style","paddingBottom","removeEventListener","className","src","sih","ref","alt","App","handle","s","scrollBy","e","currentTarget","prev","elevation","imgUrl","preUrl","makeShowLogo","bind","position","width","height","accept","getUploadParams","meta","url","f","encodeURIComponent","name","onChangeStatus","status","file","onSubmit","files","allFiles","map","JSON","parse","xhr","response","segmentedImagePath","forEach","remove","console","log","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.764e2880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sih3.777cd160.png\";","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport sih from '../images/sih3.png';\r\n\r\nlet max_offset, initial_offset;\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (window.innerHeight < 450) {\r\n      initial_offset = 110;\r\n      max_offset = 130;\r\n    } else if (window.innerHeight < 600) {\r\n      initial_offset = 80;\r\n      max_offset = 90;\r\n    } else if (window.innerHeight < 670) {\r\n      initial_offset = 58;\r\n      max_offset = 68;\r\n    } else if (window.innerHeight < 745) {\r\n      initial_offset = 54;\r\n      max_offset = 64;\r\n    } else if (window.innerHeight < 850) {\r\n      initial_offset = 50;\r\n      max_offset = 56;\r\n    } else if (window.innerHeight < 910) {\r\n      initial_offset = 47;\r\n      max_offset = 52;\r\n    } else {\r\n      initial_offset = 38;\r\n      max_offset = 43;\r\n    }\r\n    this.state = {\r\n      offset: initial_offset,\r\n      header: false,\r\n      x: 0,\r\n      previous_scroll: 0\r\n    };\r\n    // console.log(window.innerHeight);\r\n    this.homeRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.props.hideLogo();\r\n    window.scrollTo(0, 0);\r\n    // this.setState({ x: window.scrollY });\r\n    window.addEventListener(\"scroll\", this.handleScroll);\r\n    if (window.innerHeight < 670) document.body.style.paddingBottom = \"38vh\";\r\n    else document.body.style.paddingBottom = \"30vh\";\r\n  }\r\n  componentWillUnmount() {\r\n    // this.props.makeShowLogo();\r\n    document.body.style.paddingBottom = \"0\";\r\n    window.scrollTo(0, 0);\r\n    window.removeEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n\r\n  handleScroll = event => {\r\n    let scrollTop = window.pageYOffset;\r\n    const { offset, header, previous_scroll } = this.state;\r\n    if (window.innerWidth > 800) this.setState({ x: window.scrollY });\r\n    if (scrollTop > window.innerHeight / 10) {\r\n      if (!header) {\r\n        this.setState({\r\n          header: true\r\n        });\r\n        if (this.homeRef.current) {\r\n          this.homeRef.current.classList.toggle(\"logo-home\");\r\n          this.homeRef.current.classList.toggle(\"logo-header\");\r\n        }\r\n      }\r\n      if (offset <= max_offset) {\r\n        this.setState({\r\n          offset: max_offset\r\n        });\r\n      }\r\n    } else {\r\n      if (header) {\r\n        this.setState({\r\n          header: false\r\n        });\r\n        if (this.homeRef.current) {\r\n          this.homeRef.current.classList.toggle(\"logo-header\");\r\n          this.homeRef.current.classList.toggle(\"logo-home\");\r\n        }\r\n      }\r\n      if (scrollTop <= previous_scroll) {\r\n        this.setState({\r\n          offset:\r\n            max_offset -\r\n            ((max_offset - initial_offset) *\r\n              (window.innerHeight / 10 - scrollTop)) /\r\n              (window.innerHeight / 10)\r\n        });\r\n      } else {\r\n        this.setState({\r\n          offset:\r\n            initial_offset +\r\n            ((max_offset - initial_offset) * scrollTop) /\r\n              (window.innerHeight / 10)\r\n        });\r\n      }\r\n    }\r\n    if (previous_scroll < window.innerHeight / 10 + 5)\r\n      this.setState({ previous_scroll: scrollTop });\r\n  };\r\n\r\n  render() {\r\n    const { offset, x } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"logo\">\r\n          <img\r\n            src={sih}\r\n            className={`logo logo-home`}\r\n            ref={this.homeRef}\r\n            alt={\" \"}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React, {Component} from 'react';\r\nimport ReactDropzoneUploader from 'react-dropzone-uploader';\r\nimport DropzoneComponent from 'react-dropzone-component';\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport '../App.css';\r\nimport request from 'superagent';\r\nimport Axios from 'axios';\r\n\r\nclass Dropzone extends Component {\r\n  constructor(props){\r\n  super(props);\r\n  this.state={\r\n      imgUrl: '',\r\n    };\r\n  }\r\n  render(){\r\n    const getUploadParams = ({ meta }) => {\r\n      const url = \"https://httpbin.org/post\";\r\n      const fileUrl = `${url}/${encodeURIComponent(meta.name)}`;\r\n      Axios.post(`https://httpbin.org/post`, meta, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }).then(response => {\r\n        // JSON responses are automatically parsed.\r\n        this.setState({imgUrl: response.segmentedImagePath})\r\n        console.log(this.state.imgUrl);\r\n      }).catch(e => {\r\n        this.errors.push(e);\r\n      });\r\n      return {url, meta: {fileUrl}};\r\n    };\r\n  \r\n    const handleChangeStatus = ({ meta, file }, status) => {\r\n      // console.log(status, meta, file);\r\n      // console.log('fjaksld');\r\n      if(status==='done'){\r\n        console.log(meta);\r\n      }\r\n    };\r\n  \r\n    const handleSubmit = (files, allFiles) => {\r\n      console.log(files.map(f => f.meta));\r\n      allFiles.forEach(f => f.remove());\r\n        // console.log(response);\r\n    };\r\n\r\n    const eventHandlers = {\r\n      drop: this.callbackArray,\r\n      addedfile: this.callback,\r\n        success: (file, response) => {\r\n          console.log('adsf');\r\n            console.log(response);\r\n          }\r\n    };\r\n  return (\r\n      <ReactDropzoneUploader\r\n      // onDrop={this.onImageDrop.bind(this)}\r\n      // config={dropzoneConfig}\r\n      accept='image/*'\r\n      eventHandlers={eventHandlers}\r\n      getUploadParams={getUploadParams}\r\n      onChangeStatus={handleChangeStatus}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  );\r\n  }\r\n}\r\n\r\nexport default Dropzone;\r\n","import React, {Component} from 'react';\r\nimport ReactDropzoneUploader from 'react-dropzone-uploader';\r\nimport Dropzone from './components/Dropzone';\r\nimport Home from './components/Home';\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport StarfieldAnimation from 'react-starfield-animation';\r\nimport Axios from 'axios';\r\nimport './App.css';\r\n\r\nlet max_offset,initial_offset;\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      header: false,\r\n      s: false,\r\n      elevation: '',\r\n      imgUrl: '',\r\n      preUrl: '',\r\n    };\r\n    this.makeShowLogo = this.makeShowLogo.bind(this);\r\n    this.hideLogo = this.hideLogo.bind(this);\r\n  }\r\n  componentDidMount(){\r\n    this.prev = window.scrollY;\r\n    window.addEventListener('scroll',e => this.handleScroll(e));\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.handle();\r\n  }\r\n  handle = () => {\r\n    if(this.state.s){\r\n      window.scrollBy(0,window.innerHeight);\r\n    }\r\n  }\r\n  handleScroll = e => {\r\n    const window = e.currentTarget;\r\n    if (this.prev > window.scrollY) {\r\n        window.scrollBy(0,-window.innerHeight);\r\n    } else if (this.prev < window.scrollY) {\r\n      window.scrollBy(0,window.innerHeight);\r\n    }\r\n    this.prev = window.scrollY;\r\n  }\r\n  \r\n  makeShowLogo() {\r\n    const { header } = this.state;\r\n    if (!header) this.setState({ header: true });\r\n  }\r\n\r\n  hideLogo() {\r\n    const { header } = this.state;\r\n    if (header) this.setState({ header: false });\r\n  }\r\n  render(){\r\n    const getUploadParams = ({ meta }) => {\r\n      // const url=\"https://httpbin.org/post\";\r\n      const url = \"http://34.69.240.165:5000/upload\";\r\n      const f = `${url}/${encodeURIComponent(meta.name)}`;\r\n      // console.log(formData);\r\n      // Axios.post('http://34.69.240.165:5000/upload', formData, {\r\n      //   headers: {\r\n      //     'Content-Type': 'multipart/form-data',\r\n      //     'X-Requested-With': 'XMLHttpRequest'\r\n      //   },\r\n      //  }).then(response => {\r\n      //   console.log(response);\r\n      //   this.setState({preUrl: response.segmentedImagePath})\r\n      //   console.log(this.state.preUrl);\r\n      // }).catch(e => {\r\n      //   console.log(e);\r\n      // });\r\n      return {url, meta: {f}};\r\n    };\r\n  \r\n    const handleChangeStatus = ({ meta, file }, status) => {\r\n      // console.log(status, meta, file);\r\n      // console.log('fjaksld');\r\n      if(status==='done'){\r\n      }\r\n    };\r\n  \r\n    const handle = () => {\r\n      window.scrollBy(0,window.innerHeight);\r\n    }\r\n    const handleSubmit = (files, allFiles) => {\r\n      \r\n      (files.map(f => this.setState({imgUrl:JSON.parse(f.xhr.response).segmentedImagePath,\r\n        s:true})));\r\n      allFiles.forEach(f => f.remove());\r\n        console.log(JSON.parse(files[0].xhr.response));\r\n    };\r\n  const { imgUrl,s,elevation } = this.state;\r\n  return (\r\n    <div className=\"App\">\r\n        <StarfieldAnimation\r\n        style={{\r\n          position: 'absolute',\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n      />\r\n      <Home makeShowLogo={this.makeShowLogo} hideLogo={this.hideLogo}/>\r\n      \r\n    {!s&&  <ReactDropzoneUploader\r\n      accept='image/*'\r\n      getUploadParams={getUploadParams}\r\n      onChangeStatus={handleChangeStatus}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  }\r\n    {s&&<img src={imgUrl} alt=\"\"className=\"resultImg\"/>}\r\n    <div className=\"dummy\"> {s&&<h1 className=\"elevation\">Angle of Elevation : {elevation}</h1>} </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}